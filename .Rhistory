which(boo_matrix==1)
which(boo_matrix==-1)
which(boo_matrix[1, ]==-1)
which(boo_matrix[2, ]==-1)
which(boo_matrix[3, ]==-1)
which(boo_matrix[4, ]==-1)
which(boo_matrix[5, ]==-1)
which(boo_matrix[6, ]==-1)
boo_matrix
which(boo_matrix[4, ]==-1)
max(which(boo_matrix[4, ]==-1))
max(which(boo_matrix[3, ]==-1))
max(which(boo_matrix[2, ]==-1))
max(which(boo_matrix[1, ]==-1))
boo <- 1
taxonomic_ranks <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
counting <- c(1, 2, 3, 4, 5, 6, 7)
counting
split_matrix <- gsub("[kpcofgs]__", "", taxa)
split_matrix <- strsplit(as.character(split_matrix), split = "; ")
max_ranks <- max(sapply(split_matrix, length))
split_matrix <- lapply(split_matrix, function (x) {
fill_length <- max_ranks - length(x)
c(x, rep("", fill_length))
})
split_matrix <- as.matrix(do.call(rbind, split_matrix))
colnames(split_matrix) <- taxonomic_ranks[1:ncol(split_matrix)]
split_matrix
abx_df <- abx_idx_df[abx_idx_df$attribute == each_idx, ]
abx_df_kingdom <- paste0(abx_df[abx_df$rank == "Kingdom" & !abx_df$boo, "name"], collapse = "|")
abx_df_phylum <- paste0(abx_df[abx_df$rank == "Phylum" & !abx_df$boo, "name"], collapse = "|")
abx_df_class <- paste0(abx_df[abx_df$rank == "Class" & !abx_df$boo, "name"], collapse = "|")
abx_df_order <- paste0(abx_df[abx_df$rank == "Order" & !abx_df$boo, "name"], collapse = "|")
abx_df_family <- paste0(abx_df[abx_df$rank == "Family" & !abx_df$boo, "name"], collapse = "|")
abx_df_genus <- paste0(abx_df[abx_df$rank == "Genus" & !abx_df$boo, "name"], collapse = "|")
abx_df_species <- paste0(abx_df[abx_df$rank == "Species" & !abx_df$boo, "name"], collapse = "|")
res_vec <- c(abx_df_kingdom, abx_df_phylum, abx_df_class, abx_df_order, abx_df_family, abx_df_genus, abx_df_species)
res_vec[res_vec == ""] <- "EMPTY"
rm(list = ls())
taxonomic_ranks <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
counting <- c(1, 2, 3, 4, 5, 6, 7)
taxa <- row.names(abx_test_df)
taxa
split_matrix <- gsub("[kpcofgs]__", "", taxa)
##split assignment function adapted from qiimer to keep as matrix
split_matrix <- strsplit(as.character(split_matrix), split = "; ")
max_ranks <- max(sapply(split_matrix, length))
split_matrix <- lapply(split_matrix, function (x) {
fill_length <- max_ranks - length(x)
c(x, rep("", fill_length))
})
split_matrix <- as.matrix(do.call(rbind, split_matrix))
colnames(split_matrix) <- taxonomic_ranks[1:ncol(split_matrix)]
split_matrix
abx_df <- abx_idx_df[abx_idx_df$attribute == each_idx, ]
abx_df_kingdom <- paste0(abx_df[abx_df$rank == "Kingdom" & !abx_df$boo, "name"], collapse = "|")
abx_df_phylum <- paste0(abx_df[abx_df$rank == "Phylum" & !abx_df$boo, "name"], collapse = "|")
abx_df_class <- paste0(abx_df[abx_df$rank == "Class" & !abx_df$boo, "name"], collapse = "|")
abx_df_order <- paste0(abx_df[abx_df$rank == "Order" & !abx_df$boo, "name"], collapse = "|")
abx_df_family <- paste0(abx_df[abx_df$rank == "Family" & !abx_df$boo, "name"], collapse = "|")
abx_df_genus <- paste0(abx_df[abx_df$rank == "Genus" & !abx_df$boo, "name"], collapse = "|")
abx_df_species <- paste0(abx_df[abx_df$rank == "Species" & !abx_df$boo, "name"], collapse = "|")
each_idx <- "aerobe"
abx_df <- abx_idx_df[abx_idx_df$attribute == each_idx, ]
abx_df_kingdom <- paste0(abx_df[abx_df$rank == "Kingdom" & !abx_df$boo, "name"], collapse = "|")
abx_df_phylum <- paste0(abx_df[abx_df$rank == "Phylum" & !abx_df$boo, "name"], collapse = "|")
abx_df_class <- paste0(abx_df[abx_df$rank == "Class" & !abx_df$boo, "name"], collapse = "|")
abx_df_order <- paste0(abx_df[abx_df$rank == "Order" & !abx_df$boo, "name"], collapse = "|")
abx_df_family <- paste0(abx_df[abx_df$rank == "Family" & !abx_df$boo, "name"], collapse = "|")
abx_df_genus <- paste0(abx_df[abx_df$rank == "Genus" & !abx_df$boo, "name"], collapse = "|")
abx_df_species <- paste0(abx_df[abx_df$rank == "Species" & !abx_df$boo, "name"], collapse = "|")
res_vec <- c(abx_df_kingdom, abx_df_phylum, abx_df_class, abx_df_order, abx_df_family, abx_df_genus, abx_df_species)
res_vec[res_vec == ""] <- "EMPTY"
res_vec
get_pattern <- function(each_row, pattern, boo) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
boo_list*counting*boo
}
get_pattern <- function(each_row, pattern, posneg) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
boo_list*counting*posneg
}
res_matrix <- t(apply(split_matrix, 1, get_pattern, res_vec, -1))
res_matrix
boo_list*counting*posneg
get_rank_pheno <- function(each_row, pattern, posneg) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
boo_list*counting*posneg
}
get_rank_pheno(split_matrix[1, ], res_vec, -1)
get_rank_pheno(split_matrix[2, ], res_vec, -1)
max(get_rank_pheno(split_matrix[2, ], res_vec, -1))
abx(get_rank_pheno(split_matrix[2, ], res_vec, -1))
abs(get_rank_pheno(split_matrix[2, ], res_vec, -1))
get_ranked_pheno <- function(each_row, pattern, posneg) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
max(boo_list*counting)*posneg
}
res_matrix <- apply(split_matrix, 1, get_rank_pheno, res_vec, -1)
res_matrix
res_matrix <- apply(split_matrix, 1, get_ranked_pheno, res_vec, -1)
res_matrix
class(res_matrix)
pos_vector <- c(1, 0, 6, 7, 3)
pos_vector
min(pos_vector)
get_ranked_pheno <- function(each_row, pattern, posneg) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
boo_list[boo_list == 0] <- NA
min(boo_list*counting)*posneg
}
res_vector <- apply(split_matrix, 1, get_ranked_pheno, res_vec, -1)
res_vec
res_vector
get_ranked_pheno <- function(each_row, pattern, posneg) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
min(boo_list*counting)*posneg
}
res_vector <- apply(split_matrix, 1, get_ranked_pheno, res_vec, -1)
res_vector
get_ranked_pheno <- function(each_row, pattern, posneg) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
max(boo_list*counting)*posneg
}
res_vector <- apply(split_matrix, 1, get_ranked_pheno, res_vec, -1)
res_vector
max(c(1, 2, 3, 4, NA))
counting
counting <- c(7, 6, 5, 4, 3, 2, 1)
get_ranked_pheno <- function(each_row, pattern, posneg) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
max(boo_list*counting)*posneg
}
res_vector <- apply(split_matrix, 1, get_ranked_pheno, res_vec, -1)
res_vector
split_matrix
counting <- c(1, 2, 3, 4, 5, 6, 7)
get_ranked_pheno <- function(each_row, pattern, posneg) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
max(boo_list*counting)*posneg
}
res_vector <- apply(split_matrix, 1, get_ranked_pheno, res_vec, -1)
res_vector
pos_vector
res_vector == pos_vector
abs(res_vector) == pos_vector
any(abs(res_vector) == pos_vector)
c(1, 2, 3) == c(0, 2, 4)
whivh(c(1, 2, 3) == c(0, 2, 4))
which(c(1, 2, 3) == c(0, 2, 4))
?simplify_assignments
res_vector <- apply(split_matrix, 1, get_ranked_pheno, res_pattern, -1)
res_pattern <- c(abx_df_kingdom, abx_df_phylum, abx_df_class, abx_df_order, abx_df_family, abx_df_genus, abx_df_species)
res_pattern[res_pattern == ""] <- "EMPTY"
get_ranked_pheno <- function(each_row, pattern, posneg) {
boo_list <- sapply(each_row, function (x) {
grepl(pattern[match(x, each_row)], x)
})
max(boo_list*counting)*posneg
}
res_vector <- apply(split_matrix, 1, get_ranked_pheno, res_pattern, -1)
res_vector
pos_vector
sus_vector <- pos_vector
sus_vector+res_vector
(sus_vector+res_vector) > 0
if(any(abs(res_vector) == pos_vector)) {
dup_phenotype_idx <- which(abs(res_vector) == pos_vector)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_idx], collapse = "AND"),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
if(any(abs(res_vector) == sus_vector)) {
dup_phenotype_idx <- which(abs(res_vector) == pos_vector)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_idx], collapse = "AND"),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
sus_vector <- c(1, 0, 7, 7, 3)
(sus_vector+res_vector) > 0
(sus_vector+res_vector)
if(any(abs(res_vector) == sus_vector)) {
dup_phenotype_idx <- which(abs(res_vector) == pos_vector)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_idx], collapse = "AND"),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
taxa
dup_phenotype_idx <- which(abs(res_vector) == sus_vector)
dup_phenotype_idx
if(any(abs(res_vector) == sus_vector)) {
dup_phenotype_idx <- which(abs(res_vector) == sus_vector)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_idx], collapse = "AND"),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
paste0(c(1, 2, 3, 4), collapse = "AND")
paste0(c(1, 2, 3, 4), collapse = " AND ")
0/0
sus_numbers+res_numbers
res_numbers
res_pattern <- c(abx_df_kingdom, abx_df_phylum, abx_df_class, abx_df_order, abx_df_family, abx_df_genus, abx_df_species)
res_pattern[res_pattern == ""] <- "EMPTY"
res_numbers <- apply(split_matrix, 1, get_ranked_pheno, res_pattern, -1)
res_numbers
sus_numbers <- sus_vector
sus_numbers
if(any(abs(res_numbers) == sus_numbers)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
sus_numbers+res_numbers
sus_numbers
sus_numbers <- c(1, 0, 7, 6, 3)
if(any(abs(res_numbers) == sus_numbers)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
sus_numbers <- c(1, 0, 6, 7, 3)
if(any(abs(res_numbers) == sus_numbers)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
if(any(abs(res_numbers) == sus_numbers)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
sus_numbers+res_numbers
sus_numbers
res_numbers
sus_numbers <- c(1, -7, -1,  1,  0)
if(any(abs(res_numbers) == sus_numbers)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
sus_numbers+res_numbers
sus_numbers(c(1, 0, 6, 7, 0))
sus_numbers <- c(1, 0, 6, 7, 0)
if(any(abs(res_numbers) == sus_numbers)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
sus_numbers+res_numbers
sus_numbers+res_numbers/sus_numbers+res_numbers
(sus_numbers+res_numbers)/(sus_numbers+res_numbers)
new_vector <- (sus_numbers+res_numbers)/abs((sus_numbers+res_numbers))
new_vector
res_numbers
sus_numbers
sign(sus_numbers)
sign(res_numbers)
res_numbers
sign(sus_numbers)
sus_numbers
sign(sus_numbers+res_numbers)
sus_numbers
res_numbers
which(sus_numbers == 9)
taxon[which(sus_numbers == 9)]
sus_numbers[which(sus_numbers == 9)]
sus_numbers[which(sus_numbers == 9)]
yo <- sus_numbers[which(sus_numbers == 9)]
yo
sus_numbers[yo]
sus_numbers[yo] <- 1
sus_numbers[yo] <- 193002
sus_numbers
counting
c(1:7)
res_numbers
res_numbers[res_numbers<0]
abs(res_numbers) == sus_numbers
which(abs(res_numbers) == sus_numbers)
equal_index <- which(abs(res_numbers) == sus_numbers)
equal_index
res_numbers[equal_index] == 0
sus_numbers[equal_index] == 0
res_numbers[equal_index] == 0 & sus_numbers[equal_index] == 0
res_numbers[equal_index] == 0 && sus_numbers[equal_index] == 0
c(1, 0, 1) & c(1, 1, 0)
c(1, 0, 1) && c(1, 1, 0)
c(1, 0, 1) == c(1, 1, 0)
if(any(abs(res_numbers) == sus_numbers)) {
equal_index <- which(abs(res_numbers) == sus_numbers)
if(!(res_numbers[equal_index] == 0 & sus_numbers[equal_index] == 0)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
}
##have to change this in case res_numbers and sus_numbers both have 0 in same taxon
if(any(abs(res_numbers) == sus_numbers)) {
equal_index <- which(abs(res_numbers) == sus_numbers)
if(!(res_numbers[equal_index] == 0 & sus_numbers[equal_index] == 0)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
}
res_numbers
sus_numbers
if(any(abs(res_numbers) == sus_numbers)) {
equal_index <- which(abs(res_numbers) == sus_numbers)
if((res_numbers[equal_index] == 0 & sus_numbers[equal_index] == 0)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
}
if(any(abs(res_numbers) == sus_numbers)) {
equal_index <- which(abs(res_numbers) == sus_numbers)
if(!(res_numbers[equal_index] == 0 & sus_numbers[equal_index] == 0)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
}
if(any(abs(res_numbers) == sus_numbers)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
if(any(!(res_numbers[dup_phenotype_abx] == 0 & sus_numbers[dup_phenotype_abx] == 0))) {
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
}
res_numbers
sus_numbers
sus_numbers <- c(1, 0, 7, 7, 0)
if(any(abs(res_numbers) == sus_numbers)) {
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
if(any(!(res_numbers[dup_phenotype_abx] == 0 & sus_numbers[dup_phenotype_abx] == 0))) {
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_abx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
}
dup_phenotype_abx <- which(abs(res_numbers) == sus_numbers)
dup_phenotype_abx
if(any(abs(res_numbers) == sus_numbers)) {
dup_phenotype_idx <- which(abs(res_numbers) == sus_numbers & res_numbers != 0 & sus_numbers != 0)
if(any(!(res_numbers[dup_phenotype_idx] == 0 & sus_numbers[dup_phenotype_idx] == 0))) {
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_idx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
}
c(1, 0, 0, 0, 1) & c(1, 0, 1, 1, 0)
c(1, 0, 0, 0, 1) & c(1, 0, 1, 1, 1) & c(0, 0, 1, 0, 1)
if(any(abs(res_numbers) == sus_numbers & res_numbers != 0 & sus_numbers != 0)) {
dup_phenotype_idx <- which(abs(res_numbers) == sus_numbers & res_numbers != 0 & sus_numbers != 0)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_idx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
res_numbers
sus_numbers
split_matrix
sus_numbers <- c(1, 0, 6, 7, 0)
if(any(abs(res_numbers) == sus_numbers & res_numbers != 0 & sus_numbers != 0)) {
dup_phenotype_idx <- which(abs(res_numbers) == sus_numbers & res_numbers != 0 & sus_numbers != 0)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_idx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
new_vector <- sign(sus_numbers+res_numbers)
new_vector
res_numbers
sus_numbers
sus_numbers <- c(0,0,0,0,0)
if(any((abs(res_numbers) == sus_numbers) & (res_numbers != 0) & (sus_numbers != 0))) {
dup_phenotype_idx <- which(abs(res_numbers) == sus_numbers & res_numbers != 0 & sus_numbers != 0)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_idx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
sus_numbers <- c(7, 7, 7, 7, 7)
if(any((abs(res_numbers) == sus_numbers) & (res_numbers != 0) & (sus_numbers != 0))) {
dup_phenotype_idx <- which(abs(res_numbers) == sus_numbers & res_numbers != 0 & sus_numbers != 0)
stop(simpleError(paste0("Conflicting antibiotics phenotype information regarding [",
paste0(taxa[dup_phenotype_idx], collapse = "] AND ["),
"] in the abx_df_idx. Please contact tuv@chop.edu or bittingerk@chop.edu about this error")))
}
split_matrix
yo <- abx_idx_df[abx_idx_df$attribute == "aerobe"]
yo <- abx_idx_df[abx_idx_df$attribute == "aerobe",]
View(yo)
View(yo)
yo <- abx_idx_df[abx_idx_df$attribute == "aerobe" & abx_idx_df$name == "Enterococcus faecalis",]
yo[, "name"]
yo[yo$rank=="Species", "name"]
yo[yo$rank=="Phylum", "name"]
yo[yo$boo, "name"]
yo[!yo$boo, "name"]
yo[1*yo$boo, "name"]
yo[0*yo$boo, "name"]
yo[TRUE*yo$boo, "name"]
yo[FALSE*yo$boo, "name"]
yo[yo$boo, "name"]
yo[!yo$boo, "name"]
yo[TRUE+yo$boo, "name"]
TRUE+TRUE
TRUE+FALSE
TRUE*FALSE
TRUE*TRUE
yo[TRUE*yo$boo, "name"]
yo[FALSE*yo$boo, "name"]
yo[TRUE==yo$boo, "name"]
yo[FALSE==yo$boo, "name"]
TRUE == FALSE
FALSE == FALSE
FALSE == TRUE
return_ranked_pattern <- function(abx_idx, TF) {
##Filter abx_idx_df by interested abx
abx_df <- abx_idx_df[abx_idx_df$attribute == abx_idx, ]
##Grab all taxonomic classifications related to abx and save it as a vector
pattern <- unlist(lapply(taxonomic_ranks, function(x) {
paste0(abx_df[abx_df$rank == x & abx_df$boo == TF, "name"], collapse = "|")
}))
pattern[pattern == ""] <- "EMPTY"
}
abx_idx <- "aerobe"
rm(list = ls())
##Return a character vector of taxons related to the abx of interest, with each element as a taxonomic rank
return_ranked_pattern <- function(abx_idx, TF) {
##Filter abx_idx_df by interested abx
abx_df <- abx_idx_df[abx_idx_df$attribute == abx_idx, ]
##Grab all taxonomic classifications related to abx and save it as a vector
pattern <- unlist(lapply(taxonomic_ranks, function(x) {
paste0(abx_df[abx_df$rank == x & abx_df$boo == TF, "name"], collapse = "|")
}))
pattern[pattern == ""] <- "EMPTY"
}
each_idx <- "aerobe"
res_pattern <- return_ranked_pattern(each_idx, FALSE)
taxonomic_ranks <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
res_pattern <- return_ranked_pattern(each_idx, FALSE)
res_pattern
abx_idx_df
return_ranked_pattern <- function(abx_idx, TF) {
##Filter abx_idx_df by interested abx
abx_df <- abx_idx_df[abx_idx_df$attribute == abx_idx, ]
##Grab all taxonomic classifications related to abx and save it as a vector
pattern <- unlist(lapply(taxonomic_ranks, function(x) {
paste0(abx_df[abx_df$rank == x & abx_df$boo == TF, "name"], collapse = "|")
}))
#pattern[pattern == ""] <- "EMPTY"
}
res_pattern <- return_ranked_pattern(each_idx, FALSE)
res_pattern
rm(list = ls())
return_ranked_pattern <- function(abx_idx, TF) {
##Filter abx_idx_df by interested abx
abx_df <- abx_idx_df[abx_idx_df$attribute == abx_idx, ]
##Grab all taxonomic classifications related to abx and save it as a vector
pattern <- unlist(lapply(taxonomic_ranks, function(x) {
paste0(abx_df[abx_df$rank == x & abx_df$boo == TF, "name"], collapse = "|")
}))
pattern[pattern == ""] <- "EMPTY"
pattern
}
taxonomic_ranks <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
res_pattern <- return_ranked_pattern(each_idx, FALSE)
each_idx <- "aerobe"
res_pattern <- return_ranked_pattern(each_idx, FALSE)
res_pattern
sus_pattern <- return_ranked_pattern(each_idx, TRUE)
sus_pattern
abx_df <- abx_idx_df[abx_idx_df$attribute == each_idx, ]
pattern <- unlist(lapply(taxonomic_ranks, function(x) {
paste0(abx_df[abx_df$rank == x & abx_df$boo == TF, "name"], collapse = "|")
}))
pattern <- unlist(lapply(taxonomic_ranks, function(x) {
paste0(abx_df[abx_df$rank == x & abx_df$boo == FALSE, "name"], collapse = "|")
}))
pattern
class(pattern)
library(abxidx)
library(abxidx)
